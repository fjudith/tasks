# https://taskfile.dev

version: 3

# includes:
#   istio: https://github.com/fjudith/tasks.git//istio/Taskfile.yaml?ref=main

env:
  CLUSTER_NAME: default
  # KUBECONFIG: ~/.kube/config
  ISTIO_WORKDIR: /tmp
  ISTIO_VERSION: 1.26.2
  ISTIO_NAMESPACE: istio-system
  ISTIO_ROOTCA_DAYS: 3650
  ISTIO_ROOTCA_KEYSZ: 4096
  ISTIO_ROOTCA_ORG: Acme LLC.
  ISTIO_ROOTCA_CN: Acme LLC Root CA
  ISTIO_INTERMEDIATE_DAYS: 3650
  ISTIO_INTERMEDIATE_KEYSZ: 4096
  ISTIO_INTERMEDIATE_ORG: Acme LLC.
  ISTIO_INTERMEDIATE_CN: Acme LLC Intermediate CA
  ISTIO_INTERMEDIATE_SAN_DNS: istiod.istio-system.svc
  ISTIO_WORKLOAD_DAYS: 1
  ISTIO_SERVICE_ACCOUNT: default
  ISTIO_WORKLOAD_CN: Workload

tasks:
  root-ca-cert:
    desc: Generate root CA for Istio
    dir: "{{.ISTIO_WORKDIR}}"
    cmds:
      - cmd: |
          cat <<EOF > root-ca.conf
          [ req ]
          encrypt_key = no
          prompt = no
          utf8 = yes
          default_md = sha256
          default_bits = {{.ISTIO_ROOTCA_KEYSZ}}
          req_extensions = req_ext
          x509_extensions = req_ext
          distinguished_name = req_dn

          [ req_ext ]
          subjectKeyIdentifier = hash
          basicConstraints = critical, CA:true
          keyUsage = critical, digitalSignature, nonRepudiation, keyEncipherment, keyCertSign

          [ req_dn ]
          O = {{.ISTIO_ROOTCA_ORG}}
          CN = {{.ISTIO_ROOTCA_CN}}
          EOF
      - cmd: openssl genrsa -out root-key.pem 4096
      - cmd: >
          openssl req -sha256 -new
          -key root-key.pem
          -config root-ca.conf
          -out root-cert.csr
      - cmd: >
          openssl x509 -req -sha256
          -days {{.ISTIO_ROOTCA_DAYS}}
          -signkey root-key.pem
          -extensions req_ext
          -extfile root-ca.conf
          -in root-cert.csr
          -out root-cert.pem
    status:
      - test -f root-ca.conf
      - test -f root-key.pem
      - test -f root-cert.csr
      - test -f root-cert.pem

  intermediate-ca-cert:
    desc: Generate intermediate CA for Istio
    dir: "{{.ISTIO_WORKDIR}}"
    cmds:
      - cmd: mkdir -p {{.CLUSTER_NAME}}
      - cmd: |
          cat <<EOF > {{.CLUSTER_NAME}}/intermediate.conf
          [ req ]
          encrypt_key = no
          prompt = no
          utf8 = yes
          default_md = sha256
          default_bits = {{.ISTIO_INTERMEDIATE_KEYSZ}}
          req_extensions = req_ext
          x509_extensions = req_ext
          distinguished_name = req_dn

          [ req_ext ]
          subjectKeyIdentifier = hash
          basicConstraints = critical, CA:true, pathlen:0
          keyUsage = critical, digitalSignature, nonRepudiation, keyEncipherment, keyCertSign
          subjectAltName=@san

          [ san ]
          DNS.1 = {{.ISTIO_INTERMEDIATE_SAN_DNS}}

          [ req_dn ]
          O = {{.ISTIO_INTERMEDIATE_ORG}}
          CN = {{.ISTIO_INTERMEDIATE_CN}}
          L = {{.CLUSTER_NAME}}
          EOF
      - cmd: openssl genrsa -out {{.CLUSTER_NAME}}/ca-key.pem 4096
      - cmd: >
          openssl req -sha256 -new
          -key {{.CLUSTER_NAME}}/ca-key.pem
          -config {{.CLUSTER_NAME}}/intermediate.conf
          -out {{.CLUSTER_NAME}}/cluster-ca.csr
      - cmd: >
          openssl x509 -req -sha256
          -days {{.ISTIO_INTERMEDIATE_DAYS}}
          -CA root-cert.pem
          -CAkey root-key.pem
          -CAcreateserial
          -extensions req_ext
          -extfile {{.CLUSTER_NAME}}/intermediate.conf
          -in {{.CLUSTER_NAME}}/cluster-ca.csr
          -out {{.CLUSTER_NAME}}/ca-cert.pem
      - cmd: cat {{.CLUSTER_NAME}}/ca-cert.pem > {{.CLUSTER_NAME}}/cert-chain.pem
      - cmd: cp root-cert.pem {{.CLUSTER_NAME}}/
    status:
      - test -f {{.CLUSTER_NAME}}/ca-key.pem
      - test -f {{.CLUSTER_NAME}}/intermediate.conf
      - test -f {{.CLUSTER_NAME}}/cluster-ca.csr
      - test -f {{.CLUSTER_NAME}}/ca-cert.pem
      - test -f {{.CLUSTER_NAME}}/cert-chain.pem
      - test -f {{.CLUSTER_NAME}}/root-cert.pem

  namespace:
    desc: Create Istio default namespace
    cmds:
      - cmd: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Namespace
          metadata:
            name: istio-system
          EOF
    status:
      - kubectl get ns istio-system
  
  install:istioctl:
    desc: Install Istio control CLI
    run: when_changed
    cmds:
      - cmd: |
          mkdir -vp ${HOME}/.local/istio/{{.ISTIO_VERSION}} \
          && curl -fsSL https://github.com/istio/istio/releases/download/{{.ISTIO_VERSION}}/istio-{{.ISTIO_VERSION}}-linux-amd64.tar.gz \
          | tar xvzf - --strip-component=1 --directory=${HOME}/.local/istio/{{.ISTIO_VERSION}} \
          && ln -sf ${HOME}/.local/istio/{{.ISTIO_VERSION}}/bin/istioctl ${HOME}/.local/bin/istioctl
    status:
      - test -f ~/.local/bin/istioctl
      - istioctl version

  deploy:certs:
    desc: Deploy 
    summary: >
      Provision Istio namespace and secrets related to certificate authority (CA) with a root certificate, signing certificate and key.
      (ref. https://istio.io/latest/docs/tasks/security/cert-management/plugin-ca-cert/)
    dir: "{{.ISTIO_WORKDIR}}"
    cmds:
      - task: root-ca-cert
      - task: intermediate-ca-cert
      - task: namespace
      - cmd: >
          kubectl create secret generic cacerts -n istio-system
          --from-file={{.CLUSTER_NAME}}/ca-cert.pem
          --from-file={{.CLUSTER_NAME}}/ca-key.pem
          --from-file={{.CLUSTER_NAME}}/root-cert.pem
          --from-file={{.CLUSTER_NAME}}/cert-chain.pem
    status:
      - kubectl get secret cacerts -n istio-system

  lab3:k3s:
    desc: Istio Service Mesh Essentials (Lab 3.1)
    summary: >
      Deploy Istio minimal profile with a complementary Ingress Gateway and sample a example workfload
      Install Istio on K3S (see: https://istio.io/latest/docs/ambient/install/platform-prerequisites/#k3s)
    vars:
      VERSION: "{{.ISTIO_VERSION}}"
      PLATFORM: k3s
    cmds:
      - task: install:istioctl
      - task: deploy:certs
      - cmd: mkdir -p {{.ISTIO_WORKDIR}}
      - cmd: |
          cat <<EOF > {{.ISTIO_WORKDIR}}/install-istio-config.yaml
          apiVersion: install.istio.io/v1alpha1
          kind: IstioOperator
          metadata:
            name: control-plane
          spec:
            profile: minimal
            meshConfig:
              outboundTrafficPolicy:
                mode: REGISTRY_ONLY
              trustDomain: acmellc.local
          EOF
      - cmd: >
          istioctl install --verify --skip-confirmation
          --set values.global.platform="{{.PLATFORM}}"
          --filename="{{.ISTIO_WORKDIR}}/install-istio-config.yaml"
          --namespace="istio-system"
          --revision="prod"
      - cmd: kubectl label namespace default istio.io/rev=prod
      - cmd: kubectl apply -f https://raw.githubusercontent.com/istio/istio/master/samples/httpbin/httpbin.yaml
      - cmd: |
          cat <<EOF > {{.ISTIO_WORKDIR}}/global-ingress.yaml
          apiVersion: install.istio.io/v1alpha1
          kind: IstioOperator
          metadata:
            name: global-ingress
          spec:
            profile: empty
            components:
              ingressGateways:
                - name: global-ingress
                  enabled: true
                  namespace: istio-system
                  label:
                    ingress: global
          EOF
      - cmd: >
          istioctl install --skip-confirmation
          --filename="{{.ISTIO_WORKDIR}}/global-ingress.yaml"
          --revision="prod"
  
  lab3:test:
    desc: Check Istio minimal deployment in k3s
    dir: "{{.ISTIO_WORKDIR}}"
    cmds:
      - cmd: |
          istioctl proxy-config -n default secret deployment/httpbin -o json \
          | jq -r '.dynamicActiveSecrets[0].secret.tlsCertificate.certificateChain.inlineBytes' \
          | base64 --decode > chain.pem
      - cmd: |
          openssl x509 -noout -text -in chain.pem \
          grep -niE '{{.CLUSTER_NAME}}|acmellc\.local|'

  lab4:k3s:
    desc: Configuring the Ingress Gateway
    dir: "{{.ISTIO_WORKDIR}}"
    vars:
      VERSION: "{{.ISTIO_VERSION}}"
      PLATFORM: k3s
    cmds:
      - task: install:istioctl
      - task: deploy:certs
      - cmd: mkdir -p {{.ISTIO_WORKDIR}}
      - cmd: |
          cat <<EOF > {{.ISTIO_WORKDIR}}/install-istio-config.yaml
          apiVersion: install.istio.io/v1alpha1
          kind: IstioOperator
          spec:
            profile: demo
            components:
              ingressGateways:
                - name: istio-ingressgateway
                  k8s:
                    serviceAnnotations:
                      metallb.io/allow-shared-ip: edge-endpoint
          EOF
      - cmd: |
          istioctl install --verify --skip-confirmation \
          --set values.global.platform={{.PLATFORM}} \
          -f {{.ISTIO_WORKDIR}}/install-istio-config.yaml
      - cmd: kubectl label namespace default istio-injection=enabled
      - cmd: kubectl apply -f https://raw.githubusercontent.com/istio/istio/master/samples/httpbin/httpbin.yaml
      - cmd: kubectl -n default wait pod --for=condition=Ready -l app=httpbin --timeout 60s
      - cmd: kubectl -n default rollout restart deploy/httpbin
      - cmd: kubectl -n default wait pod --for=condition=Ready -l app=httpbin --timeout 60s
      - cmd: |
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.istio.io/v1alpha3
          kind: Gateway
          metadata:
            name: ingress-gateway
          spec:
            selector:
              istio: ingressgateway
            servers:
              - port:
                  number: 80
                  name: http
                  protocol: HTTP
                hosts:
                  - "httpbin.com"
          EOF
      - cmd: kubectl -n istio-system logs deploy/istio-ingressgateway
      - cmd: |
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.istio.io/v1beta1
          kind: VirtualService
          metadata:
            name: httpbin-vs
          spec:
            hosts:
              - "httpbin.com"
            gateways:
              - ingress-gateway
            http:
              - route:
                  - destination:
                      host: httpbin.default.svc.cluster.local
                      port:
                        number: 8000
          EOF
      - cmd: |
          export INGRESS_IP=$(kubectl -n istio-system get svc istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}') \
          && curl -v -H 'Host: httpbin.com' http://${INGRESS_IP}
      - cmd: kubectl get vs
    status:
      - kubectl -n istio-system wait pod -l app.kubernetes.io/name=istio-ingressgateway --timout 30s
      - kubectl -n istio-system wait pod -l app.kubernetes.io/name=istio-egressgateway --timout 30s
      - kubectl -n istio-system wait pod -l app.kubernetes.io/name=istiod --timout 30s
      - kubectl -n istio-system wait pod -l app=httpbin --timout 30s
      - kubectl get namespace -l istio-injection=enabled | grep default

  lab5:k3s:
    desc: Matching and Routing Traffic Between Services
    vars:
      ISTIO_SAMPLES:
        sh: echo ${HOME}/.local/istio/{{.ISTIO_VERSION}}/samples
    dir: "{{.ISTIO_WORKDIR}}"
    cmds:
      - task: lab4:k3s
      - cmd: "{{.ISTIO_SAMPLES}}/helloworld/gen-helloworld.sh --version v1 | kubectl apply -f -"
      - cmd: "{{.ISTIO_SAMPLES}}/helloworld/gen-helloworld.sh --version v2 | kubectl apply -f -"
      - cmd: kubectl apply -f {{.ISTIO_SAMPLES}}/sleep/sleep.yaml
      - cmd: >
          kubectl wait pod
          --for=condition=Ready
          -l 'app=helloworld'
          --timeout=120s
      - cmd: >
          kubectl wait pod
          --for=condition=Ready
          -l 'app=sleep'
          --timeout=120s
      - cmd: kubectl get pods
      - cmd: sleep 10s
      - for: ['0', '1', '2', '3', '4', '5']
        cmd: >
          kubectl exec -it deploy/sleep -- curl
          http://helloworld.default.svc.cluster.local:5000/hello
      # Traffic Splitting
      - cmd: |
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.istio.io/v1beta1
          kind: DestinationRule
          metadata:
            name: helloworld-dr
          spec:
            host: helloworld.default.svc.cluster.local
            subsets:
              - name: version-one
                labels:
                  version: v1
              - name: version-two
                labels:
                  version: v2
          EOF
      - cmd: |
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.istio.io/v1beta1
          kind: VirtualService
          metadata:
            name: helloworld-vs
          spec:
            hosts:
              - helloworld.default.svc.cluster.local
            http:
              - route:
                  - destination:
                      host: helloworld.default.svc.cluster.local
                      port:
                        number: 5000
                      subset: version-one
                    weight: 95
                  - destination:
                      host: helloworld.default.svc.cluster.local
                      port:
                        number: 5000
                      subset: version-two
                    weight: 5
          EOF
      - for: ['0', '1', '2', '3', '4', '5']
        cmd: > 
          kubectl exec -it deploy/sleep -- curl
          http://helloworld.default.svc.cluster.local:5000/hello
      # Matching on URI and Rewriting
      - cmd: |
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.istio.io/v1beta1
          kind: VirtualService
          metadata:
            name: helloworld-vs
          spec:
            hosts:
              - helloworld.default.svc.cluster.local
            http:
              - match:
                  - uri:
                      prefix: "/v1"
                rewrite:
                  uri: "/hello"
                route:
                  - destination:
                      host: helloworld.default.svc.cluster.local
                      port:
                        number: 5000
                      subset: version-one
              - match:
                  - uri:
                      prefix: "/v2"
                rewrite:
                  uri: "/hello"
                route:
                  - destination:
                      host: helloworld.default.svc.cluster.local
                      port:
                        number: 5000
                      subset: version-two
          EOF
      - cmd: > 
          kubectl exec -it deploy/sleep -- curl
          http://helloworld.default.svc.cluster.local:5000/v1
      - cmd: > 
          kubectl exec -it deploy/sleep -- curl
          http://helloworld.default.svc.cluster.local:5000/v2
      - cmd: > 
          kubectl exec -it deploy/sleep -- curl -v
          http://helloworld.default.svc.cluster.local:5000/v3
        ignore_error: true

  lab6:k3s:
    desc: Configuring a Circuit Breaker
    dir: "{{.ISTIO_WORKDIR}}"
    vars:
      ISTIO_SAMPLES:
        sh: echo ${HOME}/.local/istio/{{.ISTIO_VERSION}}/samples
    cmds:
      - task: lab4:k3s
      - cmd: kubectl delete vs helloworld-vs
        ignore_error: true
      - cmd: kubectl delete dr helloworld-dr
        ignore_error: true
      - cmd: kubectl delete dr fakeservice-dr
        ignore_error: true
      - cmd: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Service
          metadata:
            name: fortio
            labels:
              app: fortio
              service: fortio
          spec:
            ports:
              - port: 8080
                name: http
            selector:
              app: fortio
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: fortio
          spec:
            selector:
              matchLabels:
                app: fortio
            template:
              metadata:
                annotations:
                  proxy.istio.io/config: |-
                    proxyStatsMatcher:
                      inclusionPrefixes:
                        - "cluster.outbound"
                      inclusionRegexps:
                        - ".*outlier_detection.*"
                        - ".*circuit_breakers.*"
                labels:
                  app: fortio
              spec:
                containers:
                  - name: fortio
                    image: fortio/fortio:latest
                    imagePullPolicy: Always
                    ports:
                      - containerPort: 8080
                        name: http-fortio
                      - containerPort: 8079
                        name: grpc-ping
          EOF
        ignore_error: true
      - cmd: "{{.ISTIO_SAMPLES}}/helloworld/gen-helloworld.sh --version v1 | kubectl apply -f -"
      - cmd: >
          kubectl wait pod
          --for=condition=Ready
          -l app=helloworld
          --timeout=120s
      - cmd: >
          kubectl exec deploy/fortio -c fortio --
          fortio load
          -c 2 
          -qps 0
          -n 100
          -quiet
          helloworld:5000/hello
      # Circuit breaker configuration
      - cmd: |
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.istio.io/v1alpha3
          kind: DestinationRule
          metadata:
            name: helloworld-dr
          spec:
            host: helloworld.default.svc.cluster.local
            trafficPolicy:
              connectionPool:
                http:
                  http1MaxPendingRequests: 1
                  http2MaxRequests: 1
                  maxRequestsPerConnection: 1
          EOF
      - cmd: >
          kubectl exec deploy/fortio -c istio-proxy --
          curl -X POST localhost:15000/reset_counters
      - cmd: >
          kubectl exec deploy/fortio -c fortio --
          fortio load
          -c 2 
          -qps 0
          -n 100
          -quiet
          helloworld:5000/hello
      - cmd: |
          kubectl exec deploy/fortio -c istio-proxy -- \
          curl localhost:15000/stats/prometheus \
          | grep 'envoy_cluster_upstream_rq_pending_overflow{cluster_name="outbound|5000||helloworld.default.svc.cluster.local"}'
      # Outlier detection
      - cmd: >
          kubectl exec deploy/fortio -c istio-proxy --
          curl -X POST localhost:15000/reset_counters
      - cmd: |
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: fakeservice
            labels:
              app: fakeservice
          spec:
            replicas: 3
            selector:
              matchLabels:
                app: fakeservice
            template:
              metadata:
                labels:
                  app: fakeservice
              spec:
                containers:
                  - name: service
                    image: nicholasjackson/fake-service:v0.26.2
                    ports:
                      - containerPort: 9090
                    env:
                      - name: ERROR_RATE
                        # 50% of the responses will be failures
                        value: "0.5"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: fakeservice
          spec:
            selector:
              app: fakeservice
            ports:
              - name: http
                protocol: TCP
                port: 80
                targetPort: 9090
          EOF
      - cmd: >
          kubectl wait pod
          --for=condition=Ready
          -l 'app=fakeservice'
          --timeout=120s
      - cmd: >
          kubectl exec deploy/fortio -c fortio --
          fortio load
          -c 2 
          -qps 0
          -n 100
          -quiet
          http://fakeservice
      - cmd: |
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.istio.io/v1alpha3
          kind: DestinationRule
          metadata:
            name: fakeservice-dr
          spec:
            host: fakeservice.default.svc.cluster.local
            trafficPolicy:
              outlierDetection:
                baseEjectionTime: 3m
                consecutive5xxErrors: 1
                interval: 5s
                maxEjectionPercent: 100
          EOF
      - for: ['0', '1', '2', '3', '4', '5']
        cmd: >
          kubectl exec deploy/fortio -c fortio --
          fortio load
          -c 2 
          -qps 0
          -n 100
          -quiet
          http://fakeservice
      - cmd: sleep 185s
      - for: ['0', '1', '2', '3', '4', '5']
        cmd: >
          kubectl exec deploy/fortio -c fortio --
          fortio load
          -c 2 
          -qps 0
          -n 100
          -quiet
          http://fakeservice
      - cmd: |
          kubectl exec deploy/fortio -c istio-proxy -- \
          curl localhost:15000/stats/prometheus \
          | grep 'outlier_detection_ejections_enforced_consecutive_5xx{cluster_name="outbound|80||fakeservice.default.svc.cluster.local"}'

  lab7:k3s:
    desc: Observing Traffic in Prometheus, Grafana, Jaeger, and Kiali
    dir: "{{.ISTIO_WORKDIR}}"
    vars:
      ISTIO_SAMPLES:
        sh: echo ${HOME}/.local/istio/{{.ISTIO_VERSION}}/samples
    cmds:
      - task: lab4:k3s
      - cmd: kubectl apply -f {{.ISTIO_SAMPLES}}/bookinfo/platform/kube/bookinfo.yaml
      - cmd: kubectl apply -f {{.ISTIO_SAMPLES}}/bookinfo/networking/bookinfo-gateway.yaml
      - cmd: >
          kubectl wait pod
          --for=condition=Ready
          -l 'app=reviews'
          --timeout=120s
      - for: ['0', '1', '2', '3', '4', '5']
        cmd: |
          export GATEWAY_IP=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}') \
          && curl -s "http://${GATEWAY_IP}/productpage" | grep -o "<title>.*</title>"
      - cmd: kubectl apply -f {{.ISTIO_SAMPLES}}/addons/prometheus.yaml
      - cmd: >
          kubectl wait pod
          --for=condition=Ready
          -n istio-system
          -l 'app.kubernetes.io/name=prometheus'
          --timeout=120s
      - cmd: kubectl apply -f {{.ISTIO_SAMPLES}}/addons/grafana.yaml
      - cmd: >
          kubectl wait pod
          --for=condition=Ready
          -n istio-system
          -l 'app.kubernetes.io/name=grafana'
          --timeout=120s
      - cmd: kubectl apply -f {{.ISTIO_SAMPLES}}/addons/jaeger.yaml
      - cmd: >
          kubectl wait pod
          --for=condition=Ready
          -n istio-system
          -l 'app=jaeger'
          --timeout=120s
      - cmd: kubectl apply -f {{.ISTIO_SAMPLES}}/addons/kiali.yaml
      - cmd: >
          kubectl wait pod
          --for=condition=Ready
          -n istio-system
          -l 'app.kubernetes.io/name=kiali'
          --timeout=120s

  lab7:test:
    desc: Continuously send requests to the bookinfo service
    dir: "{{.ISTIO_WORKDIR}}"
    vars:
      GATEWAY_IP:
        sh: echo $(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
    cmds:
      - cmd: |
          while true
          do
            curl "http://{{.GATEWAY_IP}}/productpage" | grep -o "<title>.*</title>"
          done

  lab8:k3s:
    desc: Using PeerAuthentication and AuthorizationPolicy
    dir: "{{.ISTIO_WORKDIR}}"
    vars:
      ISTIO_SAMPLES:
        sh: echo ${HOME}/.local/istio/{{.ISTIO_VERSION}}/samples
    cmds:
      - task: lab4:k3s
      - cmd: kubectl create ns sleep --dry-run -o yaml | kubectl apply -f -
      - cmd: kubectl -n sleep apply -f {{.ISTIO_SAMPLES}}/sleep/sleep.yaml
      - cmd: kubectl -n sleep wait pod --for=condition=Ready -l app=sleep --timeout 60s
      - cmd: kubectl -n sleep rollout restart deploy/sleep
      - cmd: kubectl -n default apply -f {{.ISTIO_SAMPLES}}/httpbin/httpbin.yaml
      - cmd: kubectl -n default wait pod --for=condition=Ready -l app=httpbin --timeout 60s
      - cmd: kubectl -n default rollout restart deploy/httpbin
      - cmd: >
          kubectl exec -it deploy/sleep -n sleep --
          curl -H "Connection: close" 
          httpbin.default.svc.cluster.local:8000/ip
      # Create a PeerAuthentication Resource
      - cmd: |
          cat <<EOF | kubectl apply -f -
          apiVersion: security.istio.io/v1beta1
          kind: PeerAuthentication
          metadata:
            name: strict
            namespace: default
          spec:
            mtls:
              mode: STRICT
          EOF
      - cmd: >
          kubectl exec -it deploy/sleep -n sleep --
          curl -v -H "Connection: close" 
          httpbin.default.svc.cluster.local:8000/ip
        ignore_error: true
      - cmd: |
          cat <<EOF | kubectl apply -f -
          apiVersion: security.istio.io/v1beta1
          kind: PeerAuthentication
          metadata:
            name: httpbin
            namespace: default
          spec:
            selector:
              matchLabels:
                app: httpbin
            portLevelMtls:
              80:
                mode: PERMISSIVE
          EOF
      - cmd: >
          kubectl exec -it deploy/sleep -n sleep --
          curl httpbin.default.svc.cluster.local:8000/ip
        ignore_error: true
      # Using the AuthorizationPolicy Resource
      - cmd: kubectl apply -f {{.ISTIO_SAMPLES}}/sleep/sleep.yaml
      - cmd: kubectl wait pod --for=condition=Ready -l app=sleep --timeout 60s
      - cmd: kubectl rollout restart deploy/sleep
      - cmd: kubectl wait pod --for=condition=Ready -l app=sleep --timeout 60s
      - cmd: >
          kubectl exec -it deploy/sleep --
          curl -v -H "Connection: close"
          httpbin.default.svc.cluster.local:8000/ip
      - cmd: |
          cat <<EOF | kubectl apply -f -
          apiVersion: security.istio.io/v1beta1
          kind: AuthorizationPolicy
          metadata:
            name: allow-nothing
          spec:
            action: ALLOW
          EOF
      - cmd: sleep 30s
      - cmd: >
          kubectl exec -it deploy/sleep --
          curl -v -H "Connection: close"
          httpbin.default.svc.cluster.local:8000/ip
      - cmd: |
          cat <<EOF | kubectl apply -f -
          apiVersion: security.istio.io/v1beta1
          kind: AuthorizationPolicy
          metadata:
            name: sleep-to-httpbin
            namespace: default
          spec:
            action: ALLOW
            rules:
              - from:
                  - source:
                      principals: ["cluster.local/ns/default/sa/sleep"]
          EOF
      - cmd: sleep 30s
      - cmd: >
          kubectl exec -it deploy/sleep --
          curl -v -H "Connection: close"
          httpbin.default.svc.cluster.local:8000/ip
      - cmd: |
          cat <<EOF | kubectl apply -f -
          apiVersion: security.istio.io/v1beta1
          kind: AuthorizationPolicy
          metadata:
            name: sleep-to-httpbin
            namespace: default
          spec:
            action: ALLOW
            rules:
              - from:
                  - source:
                      principals: ["cluster.local/ns/default/sa/sleep"]
                to:
                  - operation:
                      methods: ["POST"]

          EOF
      - cmd: sleep 30s
      - cmd: >
          kubectl exec -it deploy/sleep --
          curl -H "Connection: close" -X POST
          httpbin.default.svc.cluster.local:8000/post
      - defer: kubectl delete pa strict
      - defer: kubectl delete pa httpbin
      - defer: kubectl delete ap allow-nothing

  lab9:k3s:
    desc: Installing and Using Ambient Mode
    dir: "{{.ISTIO_WORKDIR}}"
    vars:
      ISTIO_SAMPLES:
        sh: echo ${HOME}/.local/istio/{{.ISTIO_VERSION}}/samples
      VERSION: "{{.ISTIO_VERSION}}"
      PLATFORM: k3s
    cmds:
      - task: install:istioctl
      - task: deploy:certs
      - cmd: mkdir -p {{.ISTIO_WORKDIR}}
      - cmd: |
          cat <<EOF > {{.ISTIO_WORKDIR}}/install-istio-config.yaml
          apiVersion: install.istio.io/v1alpha1
          kind: IstioOperator
          spec:
            profile: ambient
            components:
              ingressGateways:
                - name: istio-ingressgateway
                  k8s:
                    serviceAnnotations:
                      metallb.io/allow-shared-ip: edge-endpoint
          EOF
      
      - cmd: istioctl validate -f {{.ISTIO_WORKDIR}}/install-istio-config.yaml
      - cmd: |
          istioctl install --verify --skip-confirmation \
          --set values.global.platform={{.PLATFORM}} \
          -f {{.ISTIO_WORKDIR}}/install-istio-config.yaml
      - cmd: istioctl analyze
      - cmd: kubectl apply -f {{.ISTIO_SAMPLES}}/sleep/sleep.yaml
      - cmd: kubectl wait pod --for=condition=Ready -l app=sleep --timeout 60s
      - cmd: kubectl rollout restart deploy/sleep
      - cmd: kubectl wait pod --for=condition=Ready -l app=sleep --timeout 60s
      - cmd: kubectl apply -f {{.ISTIO_SAMPLES}}/httpbin/httpbin.yaml
      - cmd: kubectl wait pod --for=condition=Ready -l app=httpbin --timeout 60s
      - cmd: kubectl rollout restart deploy/httpbin
      - cmd: kubectl wait pod --for=condition=Ready -l app=httpbin --timeout 60s
      - cmd: kubectl label namespace default istio-injection-
      - cmd: kubectl label namespace default istio.io/dataplane-mode=ambient
      - cmd: >
          kubectl exec -it deploy/sleep --
          curl -H "Connection: close"
          httpbin.default.svc.cluster.local:8000/ip
      - cmd: kubectl -n istio-system logs ds/ztunnel | grep -E 'fast|complete'
      - cmd: |
          cat <<EOF | kubectl apply -f -
          apiVersion: security.istio.io/v1beta1
          kind: AuthorizationPolicy
          metadata:
            name: allow-nothing
          spec:
            action: ALLOW
          EOF
      - cmd: >
          kubectl exec -it deploy/sleep --
          curl -H "Connection: close"
          httpbin.default.svc.cluster.local:8000/ip
        ignore_error: true
      - cmd: kubectl -n istio-system logs ds/ztunnel | grep -E 'RBAC|Unauthorized'
      - cmd: |
          cat <<EOF | kubectl apply -f -
          apiVersion: security.istio.io/v1beta1
          kind: AuthorizationPolicy
          metadata:
            name: sleep-to-httpbin
            namespace: default
          spec:
            action: ALLOW
            rules:
              - from:
                  - source:
                      principals: ["cluster.local/ns/default/sa/sleep"]
          EOF
      - cmd: >
          kubectl exec -it deploy/sleep --
          curl -H "Connection: close"
          httpbin.default.svc.cluster.local:8000/ip
      # The Waypoint Proxy
      - cmd: >
          kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \
          kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.3.0/standard-install.yaml
      - cmd: istioctl waypoint apply --service-account httpbin

  prune:
    desc: Cleanup provisionned resources
    dir: "{{.ISTIO_WORKDIR}}"
    vars:
      ISTIO_SAMPLES:
        sh: echo ${HOME}/.local/istio/{{.ISTIO_VERSION}}/samples
      MANIFESTS:
      - "{{.ISTIO_SAMPLES}}/bookinfo/platform/kube/bookinfo.yaml"
      - "{{.ISTIO_SAMPLES}}/bookinfo/networking/bookinfo-gateway.yaml"
      - "{{.ISTIO_SAMPLES}}/sleep/sleep.yaml"
      - "{{.ISTIO_SAMPLES}}/httpbin/httpbin.yaml"
    cmds:
    - "{{range .MANIFESTS}}kubectl --wait --force --ignore-not-found=true delete -f {{.}}\n{{end}}"
    - >
      kubectl --wait --force --ignore-not-found=true delete
      -n sleep -f {{.ISTIO_SAMPLES}}/sleep/sleep.yaml
    - kubectl --wait --force --ignore-not-found=true delete namespace sleep
    - >
      kubectl --wait --force --ignore-not-found=true delete
      -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.3.0/standard-install.yaml
    - istioctl uninstall --purge --skip-confirmation
    - kubectl --wait --force --grace-period=0 --ignore-not-found=true delete namespace istio-system
